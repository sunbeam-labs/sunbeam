#
# Sunbeam: an iridescent HTS pipeline
#
# Author: Erik Clarke <ecl@mail.med.upenn.edu>
# Created: 2016-04-28
#
import configparser
import os
import re
import shutil
import sys
import yaml

from pprint import pprint
from pathlib import Path, PurePath

from snakemake.utils import update_config, listfiles
from snakemake.exceptions import WorkflowError

from sunbeamlib import load_sample_list, __version__
from sunbeamlib.config import *
from sunbeamlib.parse import read_seq_ids
from sunbeamlib.post import *
from sunbeamlib.reports import *


# Disallow slashes in our sample names during Snakemake's wildcard evaluation.
# Slashes should always be interpreted as directory separators.
wildcard_constraints:
    sample="[^/]+",


# Load config file
if not config:
    raise SystemExit(
        "Config not found, are you sure your profile contains a path to an "
        "existing configfile?"
    )

sunbeam_dir = ""
try:
    sunbeam_dir = os.environ["SUNBEAM_DIR"]
except KeyError:
    raise SystemExit(
        "$SUNBEAM_DIR environment variable not defined. Are you sure you're "
        "running this from the Sunbeam conda env?"
    )

MIN_MEM_MB = int(os.getenv("SUNBEAM_MIN_MEM_MB", 8000))
MIN_RUNTIME = int(os.getenv("SUNBEAM_MIN_RUNTIME", 15))

# Check for major version compatibility
pkg_major, cfg_major = check_compatibility(config)
if pkg_major != cfg_major:
    raise SystemExit(
        "\nThis config file was created with a different version of Sunbeam"
        " and may not be compatible. Create a new config file using"
        "`sunbeam init` or update this one using `sunbeam config update -i /path/to/sunbeam_config.yml`\n"
    )

# Setting up config files
Cfg = check_config(config)

# Load extensions
sbxs = list(listfiles(sunbeam_dir + "/extensions/{sbx_folder}/{sbx}.rules")) + list(
    listfiles(sunbeam_dir + "/extensions/{sbx_folder}/{sbx}.smk")
)
for sbx in sbxs:
    sys.stderr.write("Found extension {sbx} in folder {sbx_folder}\n".format(**sbx[1]))

# Setting up samples and read pairs
Samples = load_sample_list(
    Cfg["all"]["samplelist_fp"],
    Cfg["all"]["paired_end"],
)
Pairs = ["1", "2"] if Cfg["all"]["paired_end"] else ["1"]


# Collect host (contaminant) genomes
sys.stderr.write("Collecting host/contaminant genomes... ")
if Cfg["qc"]["host_fp"] == Cfg["all"]["root"]:
    HostGenomeFiles = []
else:
    HostGenomeFiles = [f for f in Cfg["qc"]["host_fp"].glob("*.fasta")]
    if not HostGenomeFiles:
        sys.stderr.write(
            "\n\nWARNING: No files detected in host genomes folder ({}). "
            "If this is not intentional, make sure all files end in "
            ".fasta and the folder is specified correctly.\n\n".format(
                Cfg["qc"]["host_fp"]
            )
        )

# Once this change has been implemented for a while we can remove the try/except
# and just use an if/else, using the try/except for now to avoid migration pains
# with old sunbeam configs being copied over
try:
    if Cfg["qc"]["host_list"]:
        HostGenomes = Cfg["qc"]["host_list"]
    else:
        raise KeyError
except KeyError:
    HostGenomes = [Path(g.name).stem for g in HostGenomeFiles]
    print(HostGenomes)

sys.stderr.write("done.\n")


# ---- Change your workdir to output_fp
# workdir: str(Cfg["all"]["output_fp"])


# ---- Set up output paths for the various steps
QC_FP = output_subdir(Cfg, "qc")
BENCHMARK_FP = output_subdir(Cfg, "benchmarks")
LOG_FP = output_subdir(Cfg, "logs")
# ---- BEGIN DEPRECATED
# These paths will be moved to their respective extensions in a future version
ASSEMBLY_FP = output_subdir(Cfg, "assembly")
ANNOTATION_FP = output_subdir(Cfg, "annotation")
CLASSIFY_FP = output_subdir(Cfg, "classify")
MAPPING_FP = output_subdir(Cfg, "mapping")
# ---- END DEPRECATED


# ---- Import rules
include: "rules/targets.smk"


# Skip QC and/or decontam
if os.environ.get("SUNBEAM_SKIP", "").lower() == "decontam":

    rule skip_decontam:
        input:
            lambda wildcards: Samples[wildcards.sample][wildcards.rp],
        output:
            QC_FP / "decontam" / "{sample}_{rp}.fastq.gz",
        log:
            LOG_FP / "skip_decontam_{sample}_{rp}.log",
        shell:
            """
            cp {input} {output}
            """

elif os.environ.get("SUNBEAM_SKIP", "").lower() == "qc":

    rule skip_qc:
        input:
            lambda wildcards: Samples[wildcards.sample][wildcards.rp],
        output:
            QC_FP / "cleaned" / "{sample}_{rp}.fastq.gz",
        log:
            LOG_FP / "skip_qc_{sample}_{rp}.log",
        shell:
            """
            cp {input} {output}
            """

    include: "rules/decontaminate.smk"

else:

    include: "rules/qc.smk"
    include: "rules/decontaminate.smk"


for sbx_path, wildcards in sbxs:
    if os.getenv("SUNBEAM_EXTS_INCLUDE", ""):
        if not wildcards[0] in os.environ["SUNBEAM_EXTS_INCLUDE"].split(", "):
            sys.stderr.write(
                "Excluding extension {sbx} in folder {sbx_folder}\n".format(**wildcards)
            )
            continue
    if os.getenv("SUNBEAM_EXTS_EXCLUDE", ""):
        if (
            wildcards[0] in os.environ["SUNBEAM_EXTS_EXCLUDE"].split(", ")
            or os.environ["SUNBEAM_EXTS_EXCLUDE"] == "all"
        ):
            sys.stderr.write(
                "Excluding extension {sbx} in folder {sbx_folder}\n".format(**wildcards)
            )
            continue

    sys.stderr.write(
        "Including extension {sbx} in folder {sbx_folder}\n".format(**wildcards)
    )

    include: sbx_path


# ---- Rule all: run all targets
rule all:
    input:
        TARGET_ALL,


rule test:
    input:
        samples=expand(
            QC_FP / "00_samples" / "{sample}_{rp}.fastq.gz",
            sample=Samples.keys(),
            rp=Pairs,
        ),
    run:
        print([x for x in input.samples])


rule samples:
    message:
        "Samples to be processed:"
    run:
        [print(sample) for sample in sorted(list(Samples.keys()))]


localrules:
    all,
    samples,


onstart:
    try:
        shutil.rmtree(BENCHMARK_FP)
        print("Cleared benchmarks directory.")
    except FileNotFoundError as e:
        None


onsuccess:
    print("Sunbeam finished!")
    compile_benchmarks(BENCHMARK_FP, Cfg, rules)


onerror:
    print("Sunbeam failed with error.")
    compile_benchmarks(BENCHMARK_FP, Cfg, rules)
