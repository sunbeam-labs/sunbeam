import argparse
import re
import sys
from pathlib import Path

from sunbeam import EXTENSIONS_DIR, logger
from sunbeam.ai.rule_creator import create_rules_from_prompt


def main(argv=sys.argv):
    parser = main_parser()
    args = parser.parse_args(argv)

    ruleset_name = args.name
    prompt = args.prompt

    ext_dir = EXTENSIONS_DIR() / f"sbx_{ruleset_name}"
    try:
        ext_dir.mkdir(parents=True, exist_ok=False)
    except FileExistsError:
        raise SystemExit(f"Extension directory {ext_dir} already exists")

    rules_path = ext_dir / f"sbx_{ruleset_name}.smk"
    result = create_rules_from_prompt(prompt, write_to=rules_path)

    _create_support_files(result.rules_text, ext_dir)
    logger.info(f"Created extension scaffold at {ext_dir}")


def _create_support_files(rules_text: str, base_dir: Path) -> None:
    """Create placeholder env and script files referenced in rules."""

    conda_re = re.compile(r"conda:\s*[\"']?([^\"']+)[\"']?")
    script_re = re.compile(r"script:\s*[\"']?([^\"']+)[\"']?")

    for match in conda_re.finditer(rules_text):
        rel_path = match.group(1)
        file_path = base_dir / rel_path
        file_path.parent.mkdir(parents=True, exist_ok=True)
        if not file_path.exists():
            file_path.write_text("# Generated by sunbeam generate\n")

    for match in script_re.finditer(rules_text):
        rel_path = match.group(1)
        file_path = base_dir / rel_path
        file_path.parent.mkdir(parents=True, exist_ok=True)
        if not file_path.exists():
            file_path.write_text("#!/usr/bin/env python\n\n")


def main_parser():
    parser = argparse.ArgumentParser(
        "sunbeam generate",
        description="Generate a Sunbeam extension from a natural language prompt.",
    )
    parser.add_argument("--name", required=True, help="Name of the ruleset to create")
    parser.add_argument(
        "--prompt", required=True, help="Description of rules to generate"
    )
    return parser
