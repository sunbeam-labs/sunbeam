#
# Sunbeam: an iridescent HTS pipeline
#
# Author: Erik Clarke <ecl@mail.med.upenn.edu>
# Created: 2016-04-28
#
import configparser
import os
import re
import shutil
import sys
import yaml

from pprint import pprint
from pathlib import Path, PurePath

from snakemake.utils import update_config, listfiles
from snakemake.exceptions import WorkflowError

from sunbeamlib import load_sample_list, read_seq_ids
from sunbeamlib.config import *
from sunbeamlib.post import *
from sunbeamlib.reports import *


# Disallow slashes in our sample names during Snakemake's wildcard evaluation.
# Slashes should always be interpreted as directory separators.
wildcard_constraints:
    sample="[^/]+",


# Load config file
if not config:
    raise SystemExit(
        "Config not found, are you sure your profile contains a path to an "
        "existing configfile?"
    )

sunbeam_dir = ""
try:
    sunbeam_dir = os.environ["SUNBEAM_DIR"]
except KeyError:
    raise SystemExit(
        "$SUNBEAM_DIR environment variable not defined. Are you sure you're "
        "running this from the Sunbeam conda env?"
    )

# Check for major version compatibility
pkg_major, cfg_major = check_compatibility(config)
if pkg_major > cfg_major:
    raise SystemExit(
        "\nThis config file was created with an older version of Sunbeam"
        " and may not be compatible. Create a new config file using"
        "`sunbeam init` or update this one using `sunbeam config update -i /path/to/sunbeam_config.yml`\n"
    )
elif pkg_major < cfg_major:
    raise SystemExit(
        "\nThis config file was created with an older version of Sunbeam"
        " and may not be compatible. Create a new config file using"
        "`sunbeam init` or update this one using `sunbeam config update -i /path/to/sunbeam_config.yml`\n"
    )

# Setting up config files
Cfg = check_config(config)

# Load extensions
sbxs = list(listfiles(sunbeam_dir + "/extensions/{sbx_folder}/{sbx}.rules")) + list(
    listfiles(sunbeam_dir + "/extensions/{sbx_folder}/{sbx}.smk")
)
for sbx in sbxs:
    sys.stderr.write("Found extension {sbx} in folder {sbx_folder}\n".format(**sbx[1]))

# Setting up samples and read pairs
Samples = load_sample_list(
    Cfg["all"]["samplelist_fp"],
    Cfg["all"]["paired_end"],
    Cfg["all"]["root"] / Cfg["all"]["output_fp"],
)
Pairs = ["1", "2"] if Cfg["all"]["paired_end"] else ["1"]


# Collect host (contaminant) genomes
sys.stderr.write("Collecting host/contaminant genomes... ")
if Cfg["qc"]["host_fp"] == Cfg["all"]["root"]:
    HostGenomeFiles = []
else:
    HostGenomeFiles = [f for f in Cfg["qc"]["host_fp"].glob("*.fasta")]
    if not HostGenomeFiles:
        sys.stderr.write(
            "\n\nWARNING: No files detected in host genomes folder ({}). "
            "If this is not intentional, make sure all files end in "
            ".fasta and the folder is specified correctly.\n\n".format(
                Cfg["qc"]["host_fp"]
            )
        )
HostGenomes = {
    Path(g.name).stem: read_seq_ids(Cfg["qc"]["host_fp"] / g) for g in HostGenomeFiles
}
sys.stderr.write("done.\n")


# ---- Change your workdir to output_fp
# workdir: str(Cfg["all"]["output_fp"])


# ---- Set up output paths for the various steps
QC_FP = output_subdir(Cfg, "qc")
BENCHMARK_FP = output_subdir(Cfg, "benchmarks")
LOG_FP = output_subdir(Cfg, "logs")
# ---- DEPRECATED
# These paths will be moved to their respective extensions in a future version
ASSEMBLY_FP = output_subdir(Cfg, "assembly")
ANNOTATION_FP = output_subdir(Cfg, "annotation")
CLASSIFY_FP = output_subdir(Cfg, "classify")
MAPPING_FP = output_subdir(Cfg, "mapping")
# ---- DEPRECATED


# ---- Targets rules
include: "rules/targets.smk"
# ---- Quality control rules
include: "rules/qc.smk"
include: "rules/decontaminate.smk"


for sbx_path, wildcards in sbxs:

    include: sbx_path


# ---- Rule all: run all targets
rule all:
    input:
        TARGET_ALL,


rule samples:
    message:
        "Samples to be processed:"
    run:
        [print(sample) for sample in sorted(list(Samples.keys()))]


onstart:
    try:
        shutil.rmtree(BENCHMARK_FP)
        print("Cleared benchmarks directory.")
    except FileNotFoundError as e:
        None


onsuccess:
    print("Sunbeam finished!")
    compile_benchmarks(BENCHMARK_FP, Cfg["all"]["root"] / "stats")


onerror:
    print("Sunbeam failed with error.")
    warnings, errors = parse_err_and_warn(log)
    print(f"Warnings: ({len(warnings)}) {warnings}")
    print(f"Errors: ({len(errors)}) {errors}")
    alerts = parse_rule_logs(LOG_FP)
    for a in alerts:
        print(a)
    compile_benchmarks(BENCHMARK_FP, Cfg["all"]["root"] / "stats")
